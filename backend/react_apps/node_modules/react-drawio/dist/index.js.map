{"version":3,"file":"index.js","sources":["../src/utils/getEmbedUrl.ts","../src/utils/handleEvent.ts","../src/hooks/useActions.ts","../src/DrawIoEmbed.tsx"],"sourcesContent":["import { UrlParameters } from '../types';\n\nexport const getEmbedUrl = (\n  baseUrl?: string,\n  urlParameters?: UrlParameters,\n  addConfiguration?: boolean\n) => {\n  const url = new URL('/', baseUrl ?? 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n\n  urlSearchParams.append('embed', '1');\n  urlSearchParams.append('proto', 'json');\n\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach((key) => {\n      const value = urlParameters[key as keyof UrlParameters];\n\n      if (value !== undefined) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n\n  url.search = urlSearchParams.toString();\n\n  return url.toString();\n};\n","import { EmbedEvents } from '../types';\n\ntype EventHandler = {\n  [key in EmbedEvents['event']]?: (data: Extract<EmbedEvents, { event: key }>) => void;\n};\n\nexport function handleEvent(event: MessageEvent, handlers: EventHandler, baseUrl?: string) {\n  if (!event.origin.includes('embed.diagrams.net') && (baseUrl && !event.origin.includes(baseUrl))) {\n    return;\n  }\n\n  try {\n    const data = JSON.parse(event.data) as EmbedEvents;\n\n    if (data.event in handlers) {\n      const handler = handlers[data.event];\n\n      if (handler) {\n        // @ts-ignore Not sure how to fix for now\n        handler(data);\n      }\n    }\n  } catch {\n    //\n  }\n};\n","import { RefObject } from 'react';\nimport {\n  ActionConfigure,\n  ActionDialog,\n  ActionDraft,\n  ActionExport,\n  ActionLayout,\n  ActionLoad,\n  ActionMerge,\n  ActionPrompt,\n  ActionSpinner,\n  ActionStatus,\n  ActionTemplate,\n  EmbedActions\n} from '../types';\n\nexport type UniqueActionProps<T> = Omit<T, 'action'>;\n\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\n  const sendAction = (\n    action: string,\n    data: UniqueActionProps<EmbedActions>\n  ) => {\n    iframeRef.current?.contentWindow?.postMessage(\n      JSON.stringify({\n        action,\n        ...data\n      }),\n      '*'\n    );\n  };\n\n  /**\n   * Load the contents of a diagram\n   */\n  const load = (data: UniqueActionProps<ActionLoad>) => {\n    sendAction('load', data);\n  };\n\n  const configure = (data: UniqueActionProps<ActionConfigure>) => {\n    sendAction('configure', data);\n  };\n\n  /**\n   * Merge the contents of the given XML into the current file\n   */\n  const merge = (data: UniqueActionProps<ActionMerge>) => {\n    sendAction('merge', data);\n  };\n\n  /**\n   * Display a dialog in the editor window\n   */\n  const dialog = (data: UniqueActionProps<ActionDialog>) => {\n    sendAction('dialog', data);\n  };\n\n  /**\n   * Display a prompt in the editor window\n   */\n  const prompt = (data: UniqueActionProps<ActionPrompt>) => {\n    sendAction('prompt', data);\n  };\n\n  /**\n   * Show the template dialog\n   */\n  const template = (data: UniqueActionProps<ActionTemplate>) => {\n    sendAction('template', data);\n  };\n\n  /**\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n   */\n  const layout = (data: UniqueActionProps<ActionLayout>) => {\n    sendAction('layout', data);\n  };\n\n  /**\n   * Show a draft dialog\n   */\n  const draft = (data: UniqueActionProps<ActionDraft>) => {\n    sendAction('draft', data);\n  };\n\n  /**\n   * Display a message in the status bar\n   */\n  const status = (data: UniqueActionProps<ActionStatus>) => {\n    sendAction('status', data);\n  };\n\n  /**\n   * Display a spinner with a message or hide the current spinner if show is set to false\n   */\n  const spinner = (data: UniqueActionProps<ActionSpinner>) => {\n    sendAction('spinner', data);\n  };\n\n  const exportDiagram = (data: UniqueActionProps<ActionExport>) => {\n    sendAction('export', data);\n  };\n\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram\n  };\n};\n","import {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\nimport { ActionLoad, DrawIoEmbedProps, DrawIoEmbedRef } from './types';\nimport { getEmbedUrl } from './utils/getEmbedUrl';\nimport { handleEvent } from './utils/handleEvent';\nimport { UniqueActionProps, useActions } from './hooks/useActions';\nimport React from 'react';\n\nexport const DrawIoEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\n  (props, ref) => {\n    const {\n      autosave = false,\n      baseUrl,\n      urlParameters,\n      configuration,\n      xml,\n      csv,\n      exportFormat,\n      onAutoSave,\n      onSave,\n      onClose,\n      onLoad,\n      onConfigure,\n      onDraft,\n      onExport,\n      onMerge,\n      onPrompt,\n      onTemplate\n    } = props;\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const action = useActions(iframeRef);\n    const iframeUrl = getEmbedUrl(baseUrl, urlParameters, !!configuration);\n    const [isInitialized, setIsInitialized] = useState(false);\n\n    const messageHandler = (evt: MessageEvent) => {\n      handleEvent(\n        evt,\n        {\n          init: () => {\n            setIsInitialized(true);\n          },\n          load: (data) => {\n            if (onLoad) {\n              onLoad(data);\n            }\n          },\n          configure: (data) => {\n            if (configuration) {\n              action.configure({ config: configuration });\n            }\n\n            if (onConfigure) {\n              onConfigure(data);\n            }\n          },\n          autosave: (data) => {\n            if (onAutoSave) {\n              onAutoSave(data);\n            }\n          },\n          save: (data) => {\n            action.exportDiagram({\n              format: exportFormat || 'xmlsvg',\n              // @ts-ignore not allowed normally, but only for internal use\n              exit: data.exit,\n              parentEvent: 'save'\n            });\n          },\n          exit: (data) => {\n            if (onClose) {\n              onClose(data);\n            }\n          },\n          draft: (data) => {\n            if (onDraft) {\n              onDraft(data);\n            }\n          },\n          export: (data) => {\n            if (onSave) {\n              onSave({\n                event: 'save',\n                xml: data.data,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n\n            if (onExport) {\n              onExport(data);\n            }\n\n            // @ts-ignore not allowed normally, but only for internal use\n            if (data.message.exit && onClose) {\n              onClose({\n                event: 'exit',\n                modified: true,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n          },\n          merge: (data) => {\n            if (onMerge) {\n              onMerge(data);\n            }\n          },\n          prompt: (data) => {\n            if (onPrompt) {\n              onPrompt(data);\n            }\n          },\n          template: (data) => {\n            if (onTemplate) {\n              onTemplate(data);\n            }\n          }\n        },\n        baseUrl\n      );\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        ...action\n      }),\n      []\n    );\n\n    useEffect(() => {\n      let loadObject: UniqueActionProps<ActionLoad> = {};\n\n      if (isInitialized) {\n        if (xml) {\n          if (exportFormat === 'xmlpng') {\n            loadObject = { xmlpng: xml };\n          } else {\n            loadObject = { xml };\n          }\n        } else if (csv) {\n          loadObject = { descriptor: { format: 'csv', data: csv } };\n        } else {\n          loadObject = { xml: '' };\n        }\n\n        loadObject = {\n          ...loadObject,\n          autosave: autosave\n        };\n\n        action.load(loadObject);\n      }\n    }, [isInitialized, xml, csv, autosave]);\n\n    // Initial load\n    useEffect(() => {\n      window.addEventListener('message', messageHandler);\n\n      return () => {\n        window.removeEventListener('message', messageHandler);\n      };\n    }, []);\n\n    return (\n      <iframe\n        className=\"diagrams-iframe\"\n        src={iframeUrl}\n        ref={iframeRef}\n        title=\"Diagrams.net\"\n        style={{\n          width: '100%',\n          height: '100%',\n          minWidth: '400px',\n          minHeight: '400px',\n          border: 'none'\n        }}\n      />\n    );\n  }\n);\n"],"names":["getEmbedUrl","baseUrl","urlParameters","addConfiguration","url","URL","urlSearchParams","URLSearchParams","append","Object","keys","forEach","key","value","undefined","toString","search","handleEvent","event","handlers","origin","includes","data","JSON","parse","handler","useActions","iframeRef","sendAction","action","current","contentWindow","postMessage","stringify","load","configure","merge","dialog","prompt","template","layout","draft","status","spinner","exportDiagram","DrawIoEmbed","forwardRef","props","ref","autosave","configuration","xml","csv","exportFormat","onAutoSave","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","useRef","iframeUrl","isInitialized","setIsInitialized","useState","messageHandler","evt","init","config","save","format","exit","parentEvent","export","message","modified","useImperativeHandle","useEffect","loadObject","xmlpng","descriptor","window","addEventListener","removeEventListener","iframe","className","src","title","style","width","height","minWidth","minHeight","border"],"mappings":"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"}
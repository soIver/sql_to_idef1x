{"ast":null,"code":"import React, { forwardRef, useRef, useState, useImperativeHandle, useEffect } from 'react';\nconst getEmbedUrl = (baseUrl, urlParameters, addConfiguration) => {\n  const url = new URL('/', baseUrl ?? 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n  urlSearchParams.append('embed', '1');\n  urlSearchParams.append('proto', 'json');\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach(key => {\n      const value = urlParameters[key];\n      if (value !== undefined) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n  url.search = urlSearchParams.toString();\n  return url.toString();\n};\nfunction handleEvent(event, handlers, baseUrl) {\n  if (!event.origin.includes('embed.diagrams.net') && baseUrl && !event.origin.includes(baseUrl)) {\n    return;\n  }\n  try {\n    const data = JSON.parse(event.data);\n    if (data.event in handlers) {\n      const handler = handlers[data.event];\n      if (handler) {\n        // @ts-ignore Not sure how to fix for now\n        handler(data);\n      }\n    }\n  } catch {\n    //\n  }\n}\nconst useActions = iframeRef => {\n  const sendAction = (action, data) => {\n    iframeRef.current?.contentWindow?.postMessage(JSON.stringify({\n      action,\n      ...data\n    }), '*');\n  };\n  /**\n  * Load the contents of a diagram\n  */\n  const load = data => {\n    sendAction('load', data);\n  };\n  const configure = data => {\n    sendAction('configure', data);\n  };\n  /**\n  * Merge the contents of the given XML into the current file\n  */\n  const merge = data => {\n    sendAction('merge', data);\n  };\n  /**\n  * Display a dialog in the editor window\n  */\n  const dialog = data => {\n    sendAction('dialog', data);\n  };\n  /**\n  * Display a prompt in the editor window\n  */\n  const prompt = data => {\n    sendAction('prompt', data);\n  };\n  /**\n  * Show the template dialog\n  */\n  const template = data => {\n    sendAction('template', data);\n  };\n  /**\n  * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n  */\n  const layout = data => {\n    sendAction('layout', data);\n  };\n  /**\n  * Show a draft dialog\n  */\n  const draft = data => {\n    sendAction('draft', data);\n  };\n  /**\n  * Display a message in the status bar\n  */\n  const status = data => {\n    sendAction('status', data);\n  };\n  /**\n  * Display a spinner with a message or hide the current spinner if show is set to false\n  */\n  const spinner = data => {\n    sendAction('spinner', data);\n  };\n  const exportDiagram = data => {\n    sendAction('export', data);\n  };\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram\n  };\n};\nconst DrawIoEmbed = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    autosave = false,\n    baseUrl,\n    urlParameters,\n    configuration,\n    xml,\n    csv,\n    exportFormat,\n    onAutoSave,\n    onSave,\n    onClose,\n    onLoad,\n    onConfigure,\n    onDraft,\n    onExport,\n    onMerge,\n    onPrompt,\n    onTemplate\n  } = props;\n  const iframeRef = useRef(null);\n  const action = useActions(iframeRef);\n  const iframeUrl = getEmbedUrl(baseUrl, urlParameters, !!configuration);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const messageHandler = evt => {\n    handleEvent(evt, {\n      init: () => {\n        setIsInitialized(true);\n      },\n      load: data => {\n        if (onLoad) {\n          onLoad(data);\n        }\n      },\n      configure: data => {\n        if (configuration) {\n          action.configure({\n            config: configuration\n          });\n        }\n        if (onConfigure) {\n          onConfigure(data);\n        }\n      },\n      autosave: data => {\n        if (onAutoSave) {\n          onAutoSave(data);\n        }\n      },\n      save: data => {\n        action.exportDiagram({\n          format: exportFormat || 'xmlsvg',\n          // @ts-ignore not allowed normally, but only for internal use\n          exit: data.exit,\n          parentEvent: 'save'\n        });\n      },\n      exit: data => {\n        if (onClose) {\n          onClose(data);\n        }\n      },\n      draft: data => {\n        if (onDraft) {\n          onDraft(data);\n        }\n      },\n      export: data => {\n        if (onSave) {\n          onSave({\n            event: 'save',\n            xml: data.data,\n            parentEvent: data.message.parentEvent || 'export'\n          });\n        }\n        if (onExport) {\n          onExport(data);\n        }\n        // @ts-ignore not allowed normally, but only for internal use\n        if (data.message.exit && onClose) {\n          onClose({\n            event: 'exit',\n            modified: true,\n            parentEvent: data.message.parentEvent || 'export'\n          });\n        }\n      },\n      merge: data => {\n        if (onMerge) {\n          onMerge(data);\n        }\n      },\n      prompt: data => {\n        if (onPrompt) {\n          onPrompt(data);\n        }\n      },\n      template: data => {\n        if (onTemplate) {\n          onTemplate(data);\n        }\n      }\n    }, baseUrl);\n  };\n  useImperativeHandle(ref, () => ({\n    ...action\n  }), []);\n  useEffect(() => {\n    let loadObject = {};\n    if (isInitialized) {\n      if (xml) {\n        if (exportFormat === 'xmlpng') {\n          loadObject = {\n            xmlpng: xml\n          };\n        } else {\n          loadObject = {\n            xml\n          };\n        }\n      } else if (csv) {\n        loadObject = {\n          descriptor: {\n            format: 'csv',\n            data: csv\n          }\n        };\n      } else {\n        loadObject = {\n          xml: ''\n        };\n      }\n      loadObject = {\n        ...loadObject,\n        autosave: autosave\n      };\n      action.load(loadObject);\n    }\n  }, [isInitialized, xml, csv, autosave]);\n  // Initial load\n  useEffect(() => {\n    window.addEventListener('message', messageHandler);\n    return () => {\n      window.removeEventListener('message', messageHandler);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"iframe\", {\n    className: \"diagrams-iframe\",\n    src: iframeUrl,\n    ref: iframeRef,\n    title: \"Diagrams.net\",\n    style: {\n      width: '100%',\n      height: '100%',\n      minWidth: '400px',\n      minHeight: '400px',\n      border: 'none'\n    }\n  });\n});\nexport { DrawIoEmbed };","map":{"version":3,"names":["getEmbedUrl","baseUrl","urlParameters","addConfiguration","url","URL","urlSearchParams","URLSearchParams","append","Object","keys","forEach","key","value","undefined","toString","search","handleEvent","event","handlers","origin","includes","data","JSON","parse","handler","useActions","iframeRef","sendAction","action","current","contentWindow","postMessage","stringify","load","configure","merge","dialog","prompt","template","layout","draft","status","spinner","exportDiagram","DrawIoEmbed","forwardRef","props","ref","autosave","configuration","xml","csv","exportFormat","onAutoSave","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","useRef","iframeUrl","isInitialized","setIsInitialized","useState","messageHandler","evt","init","config","save","format","exit","parentEvent","export","message","modified","useImperativeHandle","useEffect","loadObject","xmlpng","descriptor","window","addEventListener","removeEventListener","React","createElement","className","src","title","style","width","height","minWidth","minHeight","border"],"sources":["C:\\dev\\django\\sql2idef1x\\sql_to_idef1x\\react_apps\\node_modules\\react-drawio\\src\\utils\\getEmbedUrl.ts","C:\\dev\\django\\sql2idef1x\\sql_to_idef1x\\react_apps\\node_modules\\react-drawio\\src\\utils\\handleEvent.ts","C:\\dev\\django\\sql2idef1x\\sql_to_idef1x\\react_apps\\node_modules\\react-drawio\\src\\hooks\\useActions.ts","C:\\dev\\django\\sql2idef1x\\sql_to_idef1x\\react_apps\\node_modules\\react-drawio\\src\\DrawIoEmbed.tsx"],"sourcesContent":["import { UrlParameters } from '../types';\n\nexport const getEmbedUrl = (\n  baseUrl?: string,\n  urlParameters?: UrlParameters,\n  addConfiguration?: boolean\n) => {\n  const url = new URL('/', baseUrl ?? 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n\n  urlSearchParams.append('embed', '1');\n  urlSearchParams.append('proto', 'json');\n\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach((key) => {\n      const value = urlParameters[key as keyof UrlParameters];\n\n      if (value !== undefined) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n\n  url.search = urlSearchParams.toString();\n\n  return url.toString();\n};\n","import { EmbedEvents } from '../types';\n\ntype EventHandler = {\n  [key in EmbedEvents['event']]?: (data: Extract<EmbedEvents, { event: key }>) => void;\n};\n\nexport function handleEvent(event: MessageEvent, handlers: EventHandler, baseUrl?: string) {\n  if (!event.origin.includes('embed.diagrams.net') && (baseUrl && !event.origin.includes(baseUrl))) {\n    return;\n  }\n\n  try {\n    const data = JSON.parse(event.data) as EmbedEvents;\n\n    if (data.event in handlers) {\n      const handler = handlers[data.event];\n\n      if (handler) {\n        // @ts-ignore Not sure how to fix for now\n        handler(data);\n      }\n    }\n  } catch {\n    //\n  }\n};\n","import { RefObject } from 'react';\nimport {\n  ActionConfigure,\n  ActionDialog,\n  ActionDraft,\n  ActionExport,\n  ActionLayout,\n  ActionLoad,\n  ActionMerge,\n  ActionPrompt,\n  ActionSpinner,\n  ActionStatus,\n  ActionTemplate,\n  EmbedActions\n} from '../types';\n\nexport type UniqueActionProps<T> = Omit<T, 'action'>;\n\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\n  const sendAction = (\n    action: string,\n    data: UniqueActionProps<EmbedActions>\n  ) => {\n    iframeRef.current?.contentWindow?.postMessage(\n      JSON.stringify({\n        action,\n        ...data\n      }),\n      '*'\n    );\n  };\n\n  /**\n   * Load the contents of a diagram\n   */\n  const load = (data: UniqueActionProps<ActionLoad>) => {\n    sendAction('load', data);\n  };\n\n  const configure = (data: UniqueActionProps<ActionConfigure>) => {\n    sendAction('configure', data);\n  };\n\n  /**\n   * Merge the contents of the given XML into the current file\n   */\n  const merge = (data: UniqueActionProps<ActionMerge>) => {\n    sendAction('merge', data);\n  };\n\n  /**\n   * Display a dialog in the editor window\n   */\n  const dialog = (data: UniqueActionProps<ActionDialog>) => {\n    sendAction('dialog', data);\n  };\n\n  /**\n   * Display a prompt in the editor window\n   */\n  const prompt = (data: UniqueActionProps<ActionPrompt>) => {\n    sendAction('prompt', data);\n  };\n\n  /**\n   * Show the template dialog\n   */\n  const template = (data: UniqueActionProps<ActionTemplate>) => {\n    sendAction('template', data);\n  };\n\n  /**\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n   */\n  const layout = (data: UniqueActionProps<ActionLayout>) => {\n    sendAction('layout', data);\n  };\n\n  /**\n   * Show a draft dialog\n   */\n  const draft = (data: UniqueActionProps<ActionDraft>) => {\n    sendAction('draft', data);\n  };\n\n  /**\n   * Display a message in the status bar\n   */\n  const status = (data: UniqueActionProps<ActionStatus>) => {\n    sendAction('status', data);\n  };\n\n  /**\n   * Display a spinner with a message or hide the current spinner if show is set to false\n   */\n  const spinner = (data: UniqueActionProps<ActionSpinner>) => {\n    sendAction('spinner', data);\n  };\n\n  const exportDiagram = (data: UniqueActionProps<ActionExport>) => {\n    sendAction('export', data);\n  };\n\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram\n  };\n};\n","import {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\nimport { ActionLoad, DrawIoEmbedProps, DrawIoEmbedRef } from './types';\nimport { getEmbedUrl } from './utils/getEmbedUrl';\nimport { handleEvent } from './utils/handleEvent';\nimport { UniqueActionProps, useActions } from './hooks/useActions';\nimport React from 'react';\n\nexport const DrawIoEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\n  (props, ref) => {\n    const {\n      autosave = false,\n      baseUrl,\n      urlParameters,\n      configuration,\n      xml,\n      csv,\n      exportFormat,\n      onAutoSave,\n      onSave,\n      onClose,\n      onLoad,\n      onConfigure,\n      onDraft,\n      onExport,\n      onMerge,\n      onPrompt,\n      onTemplate\n    } = props;\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const action = useActions(iframeRef);\n    const iframeUrl = getEmbedUrl(baseUrl, urlParameters, !!configuration);\n    const [isInitialized, setIsInitialized] = useState(false);\n\n    const messageHandler = (evt: MessageEvent) => {\n      handleEvent(\n        evt,\n        {\n          init: () => {\n            setIsInitialized(true);\n          },\n          load: (data) => {\n            if (onLoad) {\n              onLoad(data);\n            }\n          },\n          configure: (data) => {\n            if (configuration) {\n              action.configure({ config: configuration });\n            }\n\n            if (onConfigure) {\n              onConfigure(data);\n            }\n          },\n          autosave: (data) => {\n            if (onAutoSave) {\n              onAutoSave(data);\n            }\n          },\n          save: (data) => {\n            action.exportDiagram({\n              format: exportFormat || 'xmlsvg',\n              // @ts-ignore not allowed normally, but only for internal use\n              exit: data.exit,\n              parentEvent: 'save'\n            });\n          },\n          exit: (data) => {\n            if (onClose) {\n              onClose(data);\n            }\n          },\n          draft: (data) => {\n            if (onDraft) {\n              onDraft(data);\n            }\n          },\n          export: (data) => {\n            if (onSave) {\n              onSave({\n                event: 'save',\n                xml: data.data,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n\n            if (onExport) {\n              onExport(data);\n            }\n\n            // @ts-ignore not allowed normally, but only for internal use\n            if (data.message.exit && onClose) {\n              onClose({\n                event: 'exit',\n                modified: true,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n          },\n          merge: (data) => {\n            if (onMerge) {\n              onMerge(data);\n            }\n          },\n          prompt: (data) => {\n            if (onPrompt) {\n              onPrompt(data);\n            }\n          },\n          template: (data) => {\n            if (onTemplate) {\n              onTemplate(data);\n            }\n          }\n        },\n        baseUrl\n      );\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        ...action\n      }),\n      []\n    );\n\n    useEffect(() => {\n      let loadObject: UniqueActionProps<ActionLoad> = {};\n\n      if (isInitialized) {\n        if (xml) {\n          if (exportFormat === 'xmlpng') {\n            loadObject = { xmlpng: xml };\n          } else {\n            loadObject = { xml };\n          }\n        } else if (csv) {\n          loadObject = { descriptor: { format: 'csv', data: csv } };\n        } else {\n          loadObject = { xml: '' };\n        }\n\n        loadObject = {\n          ...loadObject,\n          autosave: autosave\n        };\n\n        action.load(loadObject);\n      }\n    }, [isInitialized, xml, csv, autosave]);\n\n    // Initial load\n    useEffect(() => {\n      window.addEventListener('message', messageHandler);\n\n      return () => {\n        window.removeEventListener('message', messageHandler);\n      };\n    }, []);\n\n    return (\n      <iframe\n        className=\"diagrams-iframe\"\n        src={iframeUrl}\n        ref={iframeRef}\n        title=\"Diagrams.net\"\n        style={{\n          width: '100%',\n          height: '100%',\n          minWidth: '400px',\n          minHeight: '400px',\n          border: 'none'\n        }}\n      />\n    );\n  }\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}